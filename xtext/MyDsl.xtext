// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/requirements_editor/model/requirements_editor.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DocumentRoot returns DocumentRoot:
	{DocumentRoot}
	'DocumentRoot'
	'{'
		('rootCategories' ':' '[' rootCategories+=Category ( "," rootCategories+=Category)* ']' )?
		('persons' ':' '[' person+=Person ( "," person+=Person)* ']' )?
	'}';

Requirement returns Requirement:
	QualityRequirement | FunctionalRequirement;

Description returns Description:
	TextualDescription;

Dependency returns Dependency:
	Refines | ICost | CValue | Requires;

Argument returns Argument:
	BinaryOperatorArgument | RequirementArgument | NOTOperator;

Category returns Category:
	'Category'
	name=EString
	'{'
		'categoryOwnedBy' ':' categoryOwnedBy=[Person|EString]
		('subcategoryOf' ':' '[' subcategoryOf+=Category ( "," subcategoryOf+=Category)* ']' )?
		('requirements' ':' '[' requirement+=Requirement ( "," requirement+=Requirement)* ']' )?
	'}';

Person returns Person:
	'Person'
	name=EString
	'{'
		('lastname' ':' lastname=EString)?
		('personOwnsRequirements' ':' '[' personOwnsRequirement+=[Requirement|EString] ( "," personOwnsRequirement+=[Requirement|EString])* ']' )?
		('personOwnsCategories' ':' '[' personOwnsCategory+=[Category|EString] ( "," personOwnsCategory+=[Category|EString])* ']' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

QualityRequirement returns QualityRequirement:
	'QualityRequirement'
	identifier=EString
	'{'
		'name' ':' name=EString
		(isMandatory?='isMandatory')?
		'priority' ':' priority=EInt
		'requirementOwnedBy' ':' requirementOwnedBy=[Person|EString]
		'description' ':' description=Description
		('dependencies' ':' '[' dependencySource+=Dependency ( "," dependencySource+=Dependency)* ']' )?
	'}';

FunctionalRequirement returns FunctionalRequirement:
	'FunctionalRequirement'
	identifier=EString
	'{'
		'name' ':' name=EString
		(isMandatory?='isMandatory')?
		'priority' ':' priority=EInt
		'requirementOwnedBy' ':' requirementOwnedBy=[Person|EString]
		'description' ':' description=Description
		('dependencies' ':' '[' dependencySource+=Dependency ( "," dependencySource+=Dependency)* ']' )?
	'}';

TextualDescription returns TextualDescription:
	{TextualDescription}
	description=EString;

Refines returns Refines:
	'Refines' dependencyTarget=[Requirement|EString] ('comment' ':' comment=EString)? ;

ICost returns ICost:
	'ICost' dependencyTarget=[Requirement|EString] ('comment' comment=EString)?;

CValue returns CValue:
	'CValue' dependencyTarget=[Requirement|EString] ('comment' comment=EString)?;

Requires returns Requires:
	'Requires' argument=Argument;

BinaryOperatorArgument returns BinaryOperatorArgument:
	'(' leftSideArgument=Argument  operator=BinaryOperator rightSideArgument=Argument ')';

RequirementArgument returns RequirementArgument:
	 requirement=[Requirement|EString];

NOTOperator returns NOTOperator:
	'NOT' argument=Argument;

enum BinaryOperator returns BinaryOperator:
				OR = 'OR' | AND = 'AND';
